We're using python 3 because we can. Please don't add python 2 compatibility (unless we really take off and users
actually want that).

IRC library stuff has been moved out into the pircel project, we'll just be a user of that project.

Other libraries we'll use:

* Tornado: async loop for cooperative multitasking, web server for fetch API, websockets for push api.
* websockets, not zmq: If you ignore the existence of WAMP and autobahn then websockets are a surprisingly pleasant
                       bidirectional message layer. Tornado has built in server support and client libraries exist for
                       all sorts of languages now.

Check the issue tracker for outstanding tasks, current general state is:

IRC parsing and modelling in pircel is in a vaguely usable state, needs to start growing with use now, feel free to
write tests or generally poke it until it dies then fix what was broken.

Web API and real time notification in possel is also in a somewhat usable state, again needs testing.

There's a web client for testing, it's not very good but it's useful for testing the API and serves as an example of how
I expect possel clients to work (i.e. put as much work as possible in the server).

Until it's an issue we're not giving much thought to performance; in particular pircel is fairly synchronous so we'll
spend a lot of time blocking on database bits and bobs. I *do* expect this will need to be addressed.

Working on a rewrite to using Reactjs, I have gotten it to a state where I am receiving messages, and have setup a data-store which keeps messages synchronously, and reduces chances of messing with state (don't mess with state!).
There is a single object that should represent the whole state of the application, it can be accessed by calling `possel.store.state()`. we want the absolute minimum of info to be stateful, allowing us to build up a determenistic user-interface.

Things that might be of interest for the frontend:
- Currently there is no styling, so there is quite a lot of work to be done there.
- Some of the react components need wiring up, (namely buffers with an `onClick` handler that will call `possel.store.state(server_id, buffer_id)`.) This will give the ability to change channels through the ui.
- re: changing buffers, look into feasibility of using dispatcher to update the state there too!
- create and wire up a text box so that messages can easily be sent (there is a dispatch command already created for this, refer to `var p` for how to implement this.)
- Authentication is being implemented, so will need to be worked on.
- Nice to Have: Look into using localstorage for caching of messages/buffers, and possibly even state. (all of this should be handled internally within the `possel.store` object.)
